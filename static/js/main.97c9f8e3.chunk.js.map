{"version":3,"sources":["trivia.png","helpers/localStorage.js","redux/reducers/player.js","redux/reducers/settings.js","redux/reducers/index.js","redux/store/index.js","helpers/api.js","components/Footer/index.jsx","pages/Login/index.jsx","redux/actions/login.js","helpers/validations.js","components/Header/index.jsx","redux/actions/game.js","components/QuestCard/index.jsx","helpers/decoder.js","pages/Jogo/index.jsx","helpers/shuffle.js","helpers/hashEmail.js","pages/Feedback/index.jsx","pages/Ranking/index.jsx","redux/actions/settings.js","pages/Configuracao/index.jsx","App.js","index.js"],"names":["module","exports","getLocalRanking","rankingLocalStorage","localStorage","getItem","JSON","parse","setLocalToken","token","setItem","INITIAL_STATE","playerName","assertions","score","gravatarEmail","player","state","action","type","payload","email","category","difficulty","settings","config","value","rootReducer","combineReducers","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","window","Cypress","fetchTriviaToken","a","fetch","response","json","data","getTriviaToken","local","genetareSettingsURL","getState","URL_SETTINGS","fetchTriviaQuestion","results","fetchAllCategories","trivia_categories","Footer","className","Login","dispatch","useDispatch","useState","btnStatus","setBtnStatus","playerInfo","setPlayerInfo","onClickButton","loginInfo","api","useEffect","test","length","changeInput","target","id","prevState","src","triviaLogo","alt","htmlFor","required","data-testid","onChange","to","onClick","disabled","Header","useSelector","emailHash","md5","toString","photoLink","resetGame","QuestCard","quest","timer","setTimer","gameTimeout","setGameTimeout","setNextBtnStatus","question","answers","correct","interval","setInterval","clearInterval","handleClick","allButtons","document","querySelectorAll","wrongIndex","forEach","button","innerText","classList","add","setAttribute","findAndSetClassName","setScore","hard","medium","easy","calculateScore","map","answer","index","key","decodeHTML","encoded","txt","createElement","innerHTML","Jogo","history","useHistory","isLoading","setIsLoading","nextBtnStatus","allQuestions","setAllQuestions","setIndex","decode","encodedHTML","newArr","createAnswers","questions","incorrect","incorrect_answers","correct_answer","array","sort","Math","random","fetchQuestions","maxQuests","push","hashEmail","Feedback","photo","name","picture","updatedRank","stringify","setLocalRanking","Ranking","ranking","setRanking","noRecords","setNoRecords","localRanking","b","changeConfig","newConfig","Configuracao","reduxSettings","categoriesList","setCategoriesList","loading","setLoading","setDifficulty","setType","setCategory","categories","getCategories","handleChange","categ","App","exact","path","component","ReactDOM","render","basename","Store","getElementById"],"mappings":"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","file":"static/js/main.97c9f8e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","// Retorna o valor da chave 'token' do localStorage\r\nexport const getLocalToken = () => {\r\n  const userLocalStorage = localStorage.getItem('token');\r\n  if (userLocalStorage) {\r\n    return userLocalStorage;\r\n  }\r\n};\r\n\r\n// Retorna o valor da chave 'ranking' do localStorage\r\nexport const getLocalRanking = () => {\r\n  const rankingLocalStorage = localStorage.getItem('ranking');\r\n  if (rankingLocalStorage) {\r\n    return JSON.parse(rankingLocalStorage);\r\n  }\r\n};\r\n\r\n// Verifica se o ranking está criado no localStorage, caso não esteja ele cria\r\nexport const initiateRanking = () => {\r\n  const rankingLocalStorage = localStorage.getItem('ranking');\r\n  if (!rankingLocalStorage) {\r\n    localStorage.setItem('ranking', '');\r\n  }\r\n};\r\n\r\n// Adiciona uma nova pontuação a chave 'ranking' do localStorage\r\nexport const setLocalRanking = ({ playerName, score, photo }) => {\r\n  const prevState = getLocalRanking();\r\n  const playerInfo = { name: playerName, score, picture: photo };\r\n\r\n  if (prevState.length !== 0) {\r\n    const updatedRank = [\r\n      ...prevState,\r\n      playerInfo,\r\n    ];\r\n    localStorage.setItem('ranking', JSON.stringify(updatedRank));\r\n  } else {\r\n    localStorage.setItem('ranking', JSON.stringify([playerInfo]));\r\n  }\r\n};\r\n\r\n// Adiciona a chave 'token' com o token recebido da api ao localStorage\r\nexport const setLocalToken = (token) => {\r\n  localStorage.setItem('token', token);\r\n};\r\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\r\nconst INITIAL_STATE = {\r\n  playerName: '',\r\n  assertions: 0,\r\n  score: 0,\r\n  gravatarEmail: '',\r\n};\r\n\r\nfunction player(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n  case 'LOGIN_USER':\r\n    return {\r\n      ...state,\r\n      playerName: action.payload.playerName,\r\n      gravatarEmail: action.payload.email,\r\n    };\r\n  case 'CHANGE_SCORE':\r\n    return {\r\n      ...state,\r\n      score: state.score + action.payload.score,\r\n      assertions: state.assertions + action.payload.assertions,\r\n    };\r\n  case 'RESET_STORE':\r\n    return {\r\n      ...state,\r\n      playerName: '',\r\n      gravatarEmail: '',\r\n      score: 0,\r\n      assertions: 0,\r\n    };\r\n  default:\r\n    return state;\r\n  }\r\n}\r\n\r\nexport default player;\r\n","// Esse reducer será responsável por tratar as configurações do jogo na chamada para a API\r\nconst INITIAL_STATE = {\r\n  category: 'any',\r\n  difficulty: 'any',\r\n  type: 'any',\r\n};\r\n\r\nfunction settings(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n  case 'CHANGE_CONFIG':\r\n    return {\r\n      ...state,\r\n      [action.payload.config]: action.payload.value,\r\n    };\r\n  default:\r\n    return state;\r\n  }\r\n}\r\n\r\nexport default settings;\r\n","import { combineReducers } from 'redux';\r\nimport player from './player';\r\nimport settings from './settings';\r\n\r\nconst rootReducer = combineReducers({ player, settings });\r\n\r\nexport default rootReducer;\r\n","import { legacy_createStore as createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from '../reducers';\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  composeWithDevTools(\r\n    applyMiddleware(thunk),\r\n  ),\r\n);\r\n\r\nif (window.Cypress) {\r\n  window.store = store;\r\n}\r\n\r\nexport default store;\r\n","import * as local from './localStorage';\r\nimport store from '../redux/store';\r\n\r\nconst URL_TRIVIA_TOKEN = 'https://opentdb.com/api_token.php?command=request';\r\nconst URL_TRIVIA_CATEGORIES = 'https://opentdb.com/api_category.php';\r\n\r\n// Pega um token pelo fetch.\r\nexport const fetchTriviaToken = async () => {\r\n  const response = await fetch(URL_TRIVIA_TOKEN);\r\n  const data = await response.json();\r\n  return data.token;\r\n};\r\n\r\n// Gera um token e adiciona ao localstorage\r\nexport const getTriviaToken = async () => {\r\n  const token = await fetchTriviaToken();\r\n  local.setLocalToken(token);\r\n  if (token) return token;\r\n};\r\n\r\n// Acessa o Redux, confere as configurações no estado e atualiza a URL da requisição\r\nconst genetareSettingsURL = () => {\r\n  const state = store.getState().settings;\r\n  let URL_SETTINGS = 'https://opentdb.com/api.php?amount=5&';\r\n\r\n  if (state.category !== 'any') {\r\n    URL_SETTINGS = `${URL_SETTINGS}category=${state.category}&`;\r\n  }\r\n\r\n  if (state.difficulty !== 'any') {\r\n    URL_SETTINGS = `${URL_SETTINGS}difficulty=${state.difficulty}&`;\r\n  }\r\n\r\n  if (state.type !== 'any') {\r\n    URL_SETTINGS = `${URL_SETTINGS}type=${state.type}&`;\r\n  }\r\n\r\n  return `${URL_SETTINGS}token=`;\r\n};\r\n\r\n// Fazendo o fetch nas perguntas.\r\nexport const fetchTriviaQuestion = async () => {\r\n  const token = await getTriviaToken();\r\n  const response = await fetch(genetareSettingsURL() + token);\r\n  const data = await response.json();\r\n  return data.results;\r\n};\r\n\r\nexport const fetchAllCategories = async () => {\r\n  const response = await fetch(URL_TRIVIA_CATEGORIES);\r\n  const data = await response.json();\r\n  return data.trivia_categories;\r\n};\r\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nconst Footer = () => (\r\n  <div className=\"footer\">\r\n    <p>Desenvolvido por Pedro Mello.</p>\r\n  </div>\r\n);\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport triviaLogo from '../../trivia.png';\r\nimport { loginUser } from '../../redux/actions/login';\r\nimport { emailValidation, nameValidation } from '../../helpers/validations';\r\nimport * as api from '../../helpers/api';\r\nimport './Login.css';\r\nimport { initiateRanking } from '../../helpers/localStorage';\r\nimport Footer from '../../components/Footer';\r\n\r\nconst Login = () => {\r\n  // Instancia o dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // Iniciando os estados do compomente\r\n  const [btnStatus, setBtnStatus] = useState(true);\r\n  const [playerInfo, setPlayerInfo] = useState({\r\n    playerName: '',\r\n    email: '',\r\n  });\r\n\r\n  const onClickButton = async () => {\r\n    // Envia as informações dos usuários para o Redux\r\n    dispatch(loginUser(playerInfo));\r\n\r\n    // Verifica se o ranking está criado no localStorage\r\n    initiateRanking();\r\n\r\n    await api.getTriviaToken();\r\n  };\r\n\r\n  // Valida dos inputs para liberação do botão \"Jogar\"\r\n  useEffect(() => {\r\n    if (emailValidation(playerInfo.email) && nameValidation(playerInfo.playerName)) {\r\n      setBtnStatus(false);\r\n    } else {\r\n      setBtnStatus(true);\r\n    }\r\n  }, [playerInfo]);\r\n\r\n  // Atualiza os inputs com o state\r\n  const changeInput = ({ target }) => {\r\n    const { id, value } = target;\r\n    setPlayerInfo((prevState) => ({ ...prevState, [id]: value }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login-body\">\r\n        <img src={ triviaLogo } className=\"Login-logo\" alt=\"Logo Trivia\" />\r\n        <h2>Bem-vindo, insira suas informações para jogar.</h2>\r\n        <div className=\"login-form form\">\r\n          <label htmlFor=\"playerName\" className=\"login-form\">\r\n            Nome:\r\n            {' '}\r\n            <input\r\n              required\r\n              data-testid=\"input-player-name\"\r\n              className=\"form-control\"\r\n              id=\"playerName\"\r\n              type=\"playerName\"\r\n              value={ playerInfo.playerName }\r\n              onChange={ changeInput }\r\n            />\r\n          </label>\r\n          <label htmlFor=\"email\" className=\"login-form\">\r\n            Email:\r\n            {' '}\r\n            <input\r\n              required\r\n              data-testid=\"input-gravatar-email\"\r\n              className=\"form-control\"\r\n              id=\"email\"\r\n              type=\"email\"\r\n              value={ playerInfo.email }\r\n              onChange={ changeInput }\r\n            />\r\n          </label>\r\n          <Link to=\"/jogo\">\r\n            <input\r\n              data-testid=\"btn-play\"\r\n              className=\"btn login-btn\"\r\n              type=\"button\"\r\n              onClick={ onClickButton }\r\n              disabled={ btnStatus }\r\n              value=\"Jogar\"\r\n            />\r\n          </Link>\r\n        </div>\r\n        <div className=\"btns-content\">\r\n          <Link to=\"/configuracao\">\r\n            <button data-testid=\"btn-settings\" className=\"btn btn-settings\" type=\"button\">\r\n              Configuração\r\n            </button>\r\n          </Link>\r\n          <Link to=\"/ranking\">\r\n            <button data-testid=\"btn-ranking\" className=\"btn btn-ranking\" type=\"button\">\r\n              Ranking\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","const loginUser = (loginInfo) => ({\r\n  type: 'LOGIN_USER',\r\n  payload: {\r\n    playerName: loginInfo.playerName,\r\n    email: loginInfo.email,\r\n  },\r\n});\r\n\r\nexport {\r\n  // eslint-disable-next-line import/prefer-default-export\r\n  loginUser,\r\n};\r\n","// Valida se o email tem um formato válido\r\nexport const emailValidation = (email) => {\r\n  const regex = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g;\r\n  if (!email || regex.test(email) === false) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\n// Valida se o nome inserido contém ao menos 3 catacteres\r\nexport const nameValidation = (name) => {\r\n  const minLength = 3;\r\n  if (name.length < minLength) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport md5 from 'crypto-js/md5';\r\nimport triviaLogo from '../../trivia.png';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n  const { playerName, gravatarEmail, score } = useSelector((state) => state.player);\r\n  const emailHash = md5(gravatarEmail).toString();\r\n  const photoLink = `https://www.gravatar.com/avatar/${emailHash}`;\r\n\r\n  return (\r\n    <header>\r\n      <img src={ triviaLogo } className=\"Trivia-logo Login-logo\" alt=\"logo\" />\r\n      <div className=\"usuario\">\r\n        <div className=\"jogador\">\r\n          <h6>Jogador: </h6>\r\n          <p data-testid=\"header-player-name\">{playerName}</p>\r\n        </div>\r\n        <div className=\"pontuacao\">\r\n          <h6>Pontuação: </h6>\r\n          <p data-testid=\"header-score\">{score}</p>\r\n        </div>\r\n      </div>\r\n      <img\r\n        data-testid=\"header-profile-picture\"\r\n        className=\"avatar\"\r\n        src={ photoLink }\r\n        alt={ `Gravatar de ${playerName}` }\r\n      />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","export const changeScore = (setScore) => ({\r\n  type: 'CHANGE_SCORE',\r\n  payload: {\r\n    score: setScore.score,\r\n    assertions: setScore.assertions,\r\n  },\r\n});\r\n\r\nexport const resetGame = () => ({\r\n  type: 'RESET_STORE',\r\n  payload: {},\r\n});\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeScore } from '../../redux/actions/game';\r\nimport './QuestCard.css';\r\n\r\nconst QuestCard = ({\r\n  quest,\r\n  timer,\r\n  setTimer,\r\n  gameTimeout,\r\n  setGameTimeout,\r\n  setNextBtnStatus,\r\n}) => {\r\n  const { question, category, answers, correct, difficulty } = quest;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // Cronômetro do jogo\r\n  useEffect(() => {\r\n    const intervalTime = 1000;\r\n\r\n    const interval = setInterval(() => {\r\n      if (gameTimeout) {\r\n        return () => clearInterval(interval);\r\n      }\r\n      if (timer > 0) {\r\n        setTimer(timer - 1);\r\n      } else {\r\n        setGameTimeout(true);\r\n        setNextBtnStatus(true);\r\n      }\r\n    }, intervalTime);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [gameTimeout, setGameTimeout, setTimer, timer, setNextBtnStatus]);\r\n\r\n  // Seleciona todos as respostas e adiciona a classe de estilização das respostas erradas e corretas\r\n  const findAndSetClassName = () => {\r\n    const allButtons = document.querySelectorAll('.answer-btn');\r\n    let wrongIndex = 0;\r\n\r\n    allButtons.forEach((button) => {\r\n      if (button.innerText === correct) {\r\n        button.classList.add('answer-correct');\r\n        button.setAttribute('data-testid', 'correct-answer');\r\n      } else {\r\n        button.classList.add('answer-wrong');\r\n        button.setAttribute('data-testid', `wrong-answer-${wrongIndex}`);\r\n        wrongIndex += 1;\r\n      }\r\n    });\r\n  };\r\n\r\n  // Calcula a pontuação do jogador seguindo a regra de negócio\r\n  const calculateScore = () => {\r\n    const baseValue = 10;\r\n    const multipliers = { hard: 3, medium: 2, easy: 1 };\r\n\r\n    const score = baseValue + timer * multipliers[difficulty];\r\n\r\n    // Atualiza a pontuação do jogador no Redux\r\n    dispatch(\r\n      changeScore({\r\n        score,\r\n        assertions: 1,\r\n      }),\r\n    );\r\n  };\r\n\r\n  // Confere se a resposta seleciona é a correta\r\n  const handleClick = ({ target }) => {\r\n    findAndSetClassName();\r\n    setGameTimeout(true);\r\n    if (target.innerText === correct) {\r\n      calculateScore();\r\n      setNextBtnStatus(true);\r\n    } else {\r\n      setNextBtnStatus(true);\r\n    }\r\n  };\r\n\r\n  const timerClass = () => {\r\n    const lastSeconds = 10;\r\n    if (timer === 0) {\r\n      return 'finish';\r\n    }\r\n    if (timer < lastSeconds) {\r\n      return 'timerOver';\r\n    }\r\n    return 'timer';\r\n  };\r\n\r\n  return (\r\n    <div className=\"quest-body\">\r\n      <h1 className={ timerClass() }>{timer}</h1>\r\n      <div className=\"quest-header\">\r\n        <h3 data-testid=\"question-category\">{category}</h3>\r\n        <h2>{question}</h2>\r\n      </div>\r\n      <div data-testid=\"answer-options\" className=\"answer-options\">\r\n        {answers.map((answer, index) => (\r\n          <button\r\n            key={ index }\r\n            type=\"button\"\r\n            className=\"answer-btn\"\r\n            onClick={ handleClick }\r\n            disabled={ gameTimeout }\r\n            data-testid=\"question-text\"\r\n          >\r\n            {answer}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nQuestCard.propTypes = {\r\n  quest: PropTypes.shape({\r\n    question: PropTypes.string.isRequired,\r\n    answers: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    correct: PropTypes.string.isRequired,\r\n    category: PropTypes.string.isRequired,\r\n    difficulty: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  timer: PropTypes.number.isRequired,\r\n  setTimer: PropTypes.func.isRequired,\r\n  gameTimeout: PropTypes.bool.isRequired,\r\n  setGameTimeout: PropTypes.func.isRequired,\r\n  setNextBtnStatus: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default QuestCard;\r\n","/* eslint-disable import/prefer-default-export */\r\n\r\n// Recebe uma string em HTML e retorna ela decofidicada\r\nexport const decodeHTML = (encoded) => {\r\n  const txt = document.createElement('textarea');\r\n  txt.innerHTML = encoded;\r\n  return txt.value;\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Footer from '../../components/Footer';\r\nimport Header from '../../components/Header';\r\nimport QuestCard from '../../components/QuestCard';\r\nimport { fetchTriviaQuestion } from '../../helpers/api';\r\nimport { decodeHTML } from '../../helpers/decoder';\r\nimport { shuffle } from '../../helpers/shuffle';\r\nimport './Jogo.css';\r\n\r\nconst Jogo = () => {\r\n  const history = useHistory();\r\n  const maxQuests = 5;\r\n\r\n  // Iniciando os estados do compomente\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [nextBtnStatus, setNextBtnStatus] = useState(false);\r\n  const [allQuestions, setAllQuestions] = useState([]);\r\n  const [index, setIndex] = useState(0);\r\n\r\n  // Estados do componente QuestCard\r\n  const questTime = 30;\r\n  const [timer, setTimer] = useState(questTime);\r\n  const [gameTimeout, setGameTimeout] = useState(false);\r\n\r\n  // Decodifica string html ou array de strings\r\n  const decode = (encodedHTML) => {\r\n    if (typeof encodedHTML !== 'string') {\r\n      let newArr = [];\r\n      encodedHTML.forEach((answer) => {\r\n        newArr = [...newArr, decodeHTML(answer)];\r\n      });\r\n      return newArr;\r\n    }\r\n    return decodeHTML(encodedHTML);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Separa as informações vindas da API e as organiza nos states\r\n    const createAnswers = (questions) => {\r\n      questions.forEach(\r\n        ({\r\n          incorrect_answers: incorrect,\r\n          correct_answer: correct,\r\n          question,\r\n          category,\r\n          difficulty,\r\n        }) => {\r\n          setAllQuestions((prevState) => [\r\n            ...prevState,\r\n            {\r\n              question: decode(question),\r\n              category,\r\n              correct: decode(correct),\r\n              answers: shuffle([...decode(incorrect), decode(correct)]),\r\n              difficulty,\r\n            },\r\n          ]);\r\n        },\r\n      );\r\n      // Remove a mensagem \"Carregando...\" da tela\r\n      setIsLoading(false);\r\n    };\r\n\r\n    // Faz a requisição das perguntas para a API\r\n    const fetchQuestions = async () => {\r\n      const questions = await fetchTriviaQuestion();\r\n      createAnswers(questions);\r\n    };\r\n\r\n    fetchQuestions();\r\n  }, []);\r\n\r\n  const handleNext = () => {\r\n    // Quando chega na última pergunta redireciona para a tela de feedback\r\n    if (index === maxQuests - 1) {\r\n      history.push('/feedback');\r\n    }\r\n    // Passa para a próxima pergunta\r\n    setIndex(index + 1);\r\n    // Reseta o tempo do contador\r\n    setTimer(questTime);\r\n    // Reativa o contador\r\n    setGameTimeout(false);\r\n    // Desativa o botão Next\r\n    setNextBtnStatus(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-page\">\r\n      <Header />\r\n      <div className=\"quest-card\">\r\n        {isLoading ? (\r\n          <h1>Carregando...</h1>\r\n        ) : (\r\n          <QuestCard\r\n            key={ index }\r\n            quest={ allQuestions[index] }\r\n            timer={ timer }\r\n            setTimer={ setTimer }\r\n            gameTimeout={ gameTimeout }\r\n            setGameTimeout={ setGameTimeout }\r\n            setNextBtnStatus={ setNextBtnStatus }\r\n          />\r\n        )}\r\n        {nextBtnStatus ? (\r\n          <button type=\"button\" className=\"btn nxt-btn\" onClick={ handleNext }>\r\n            Next\r\n          </button>\r\n        ) : (\r\n          ''\r\n        )}\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Jogo;\r\n","/* eslint-disable import/prefer-default-export */\r\n\r\n// Embaralha um array\r\nexport const shuffle = (array) => {\r\n  const diff = 0.5;\r\n  array.sort(() => Math.random() - diff);\r\n  return array;\r\n};\r\n","/* eslint-disable import/prefer-default-export */\r\nimport md5 from 'crypto-js/md5';\r\n\r\nexport const hashEmail = (email) => {\r\n  const emailHash = md5(email).toString();\r\n  return `https://www.gravatar.com/avatar/${emailHash}`;\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport Footer from '../../components/Footer';\r\nimport Header from '../../components/Header';\r\nimport { hashEmail } from '../../helpers/hashEmail';\r\nimport { setLocalRanking } from '../../helpers/localStorage';\r\nimport { resetGame } from '../../redux/actions/game';\r\nimport './Feedback.css';\r\n\r\nconst Feedback = () => {\r\n  const { score, assertions, playerName, gravatarEmail } = useSelector(\r\n    (state) => state.player,\r\n  );\r\n  const dispatch = useDispatch();\r\n  const condition = 3;\r\n\r\n  useEffect(() => {\r\n    const playerScoreInfo = {\r\n      playerName,\r\n      score,\r\n      photo: hashEmail(gravatarEmail),\r\n    };\r\n\r\n    setLocalRanking(playerScoreInfo);\r\n  });\r\n\r\n  return (\r\n    <div className=\"feedback-page\">\r\n      <Header />\r\n      <div className=\"feedback-container\">\r\n        <div data-testid=\"feedback-text\" className=\"message\">\r\n          {assertions < condition ? 'Could be better...' : 'Well Done!'}\r\n        </div>\r\n        <div className=\"pontuacao-feed\">\r\n          <p>Pontuação final:</p>\r\n          <span data-testid=\"feedback-total-score\">{score}</span>\r\n        </div>\r\n        <div className=\"pontuacao-feed\">\r\n          <p>Você acertou:</p>\r\n          <span data-testid=\"feedback-total-question\">{assertions}</span>\r\n        </div>\r\n        <div className=\"feedback-btns\">\r\n          <Link to=\"/\">\r\n            <input\r\n              data-testid=\"btn-play-again\"\r\n              type=\"button\"\r\n              value=\"Jogar Novamente\"\r\n              className=\"feed-btn\"\r\n              onClick={\r\n                () => dispatch(resetGame)\r\n              }\r\n            />\r\n          </Link>\r\n          <Link to=\"/ranking\">\r\n            <input\r\n              data-testid=\"btn-ranking\"\r\n              className=\"feed-btn\"\r\n              type=\"button\"\r\n              value=\"Ranking\"\r\n            />\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Feedback;\r\n","/* eslint-disable no-magic-numbers */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Footer from '../../components/Footer';\r\nimport { getLocalRanking } from '../../helpers/localStorage';\r\nimport './ranking.css';\r\n\r\nconst Ranking = () => {\r\n  const [ranking, setRanking] = useState([]);\r\n  const [noRecords, setNoRecords] = useState(true);\r\n\r\n  const orderRanking = (players) => players.sort((a, b) => b.score - a.score);\r\n\r\n  useEffect(() => {\r\n    if (getLocalRanking()) {\r\n      const localRanking = orderRanking(getLocalRanking());\r\n      setRanking(() => [...localRanking]);\r\n      setNoRecords(false);\r\n    }\r\n  }, [setRanking]);\r\n\r\n  return (\r\n    <div className=\"ranking-page\">\r\n      <div className=\"ranking-header\">\r\n        <h1>RANKING</h1>\r\n        <Link to=\"/\">\r\n          <input\r\n            data-testid=\"btn-go-home\"\r\n            className=\"rk-btn\"\r\n            type=\"button\"\r\n            value=\"Inicio\"\r\n          />\r\n        </Link>\r\n      </div>\r\n      <div className=\"ranking\">\r\n        {noRecords\r\n          ? (\r\n            <div className=\"no-records-container\">\r\n              <h2 className=\"no-records\">Não há registros ainda</h2>\r\n            </div>)\r\n          : (\r\n            <div className=\"ranking-container\">\r\n              {ranking.map(({ name, score, picture }, index) => (\r\n                <div key={ index } className=\"ranking-item\">\r\n                  <img className=\"avatar\" src={ picture } alt={ `Gravatar de ${name}` } />\r\n                  <h4>\r\n                    <span>\r\n                      {`${index + 1}º. `}\r\n                      {' '}\r\n                    </span>\r\n                    <span data-testid={ `player-name-${index}` }>{name}</span>\r\n                  </h4>\r\n                  <h4 data-testid={ `player-score-${index}` }>{score}</h4>\r\n                </div>\r\n              ))}\r\n            </div>)}\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Ranking;\r\n","const changeConfig = (newConfig) => ({\r\n  type: 'CHANGE_CONFIG',\r\n  payload: {\r\n    config: newConfig.config,\r\n    value: newConfig.value,\r\n  },\r\n});\r\n\r\nexport {\r\n  // eslint-disable-next-line import/prefer-default-export\r\n  changeConfig,\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { fetchAllCategories } from '../../helpers/api';\r\nimport { changeConfig } from '../../redux/actions/settings';\r\nimport Footer from '../../components/Footer';\r\nimport './Configuracao.css';\r\n\r\nconst Configuracao = () => {\r\n  const reduxSettings = useSelector(\r\n    (state) => state.settings,\r\n  );\r\n  const [categoriesList, setCategoriesList] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [difficulty, setDifficulty] = useState(reduxSettings.difficulty);\r\n  const [type, setType] = useState(reduxSettings.type);\r\n  const [category, setCategory] = useState(reduxSettings.category);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // Pega todas as categorias na API e atualiza o state para fazer as opções do dropdown\r\n  useEffect(() => {\r\n    const getCategories = async () => {\r\n      const categories = await fetchAllCategories();\r\n      setCategoriesList(categories);\r\n      setLoading(false);\r\n    };\r\n    getCategories();\r\n  });\r\n\r\n  // Atualiza os valores no estate e no Redux ao mesmo tempo\r\n  const handleChange = ({ target: { id, value } }) => {\r\n    if (id === 'difficulty') {\r\n      setDifficulty(value);\r\n      dispatch(changeConfig({\r\n        config: id,\r\n        value,\r\n      }));\r\n    } else if (id === 'type') {\r\n      setType(value);\r\n      dispatch(changeConfig({\r\n        config: id,\r\n        value,\r\n      }));\r\n    } else {\r\n      setCategory(value);\r\n      dispatch(changeConfig({\r\n        config: id,\r\n        value,\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-page\">\r\n      <div className=\"settings-container\">\r\n        <h1>Configurações</h1>\r\n        {loading ? (\r\n          <h2>Carregando...</h2>\r\n        ) : (\r\n          <div className=\"settings-list\">\r\n            <label htmlFor=\"difficulty\">\r\n              Selecione a dificuldade:\r\n              {' '}\r\n              <select value={ difficulty } onChange={ handleChange } id=\"difficulty\">\r\n                <option value=\"any\">Any Difficulty</option>\r\n                <option value=\"easy\">Easy</option>\r\n                <option value=\"medium\">Medium</option>\r\n                <option value=\"hard\">Hard</option>\r\n              </select>\r\n            </label>\r\n            <label htmlFor=\"type\">\r\n              Selecione o tipo:\r\n              {' '}\r\n              <select value={ type } onChange={ handleChange } id=\"type\">\r\n                <option value=\"any\">Any Type</option>\r\n                <option value=\"multiple\">Multiple Choice</option>\r\n                <option value=\"boolean\">True / False</option>\r\n              </select>\r\n            </label>\r\n            <label htmlFor=\"type\">\r\n              Selecione a categoria:\r\n              {' '}\r\n              <select value={ category } onChange={ handleChange } id=\"category\">\r\n                <option value=\"any\">Any Category</option>\r\n                {categoriesList.map((categ) => (\r\n                  <option key={ categ.id } value={ categ.id }>\r\n                    {categ.name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </label>\r\n          </div>\r\n        )}\r\n        <Link to=\"/\">\r\n          <input data-testid=\"btn-go-home\" className=\"btn\" type=\"button\" value=\"Inicio\" />\r\n        </Link>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Configuracao;\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Login from './pages/Login';\r\nimport Jogo from './pages/Jogo';\r\nimport Feedback from './pages/Feedback';\r\nimport Ranking from './pages/Ranking';\r\nimport './App.css';\r\nimport Configuracao from './pages/Configuracao';\r\n\r\nexport default function App() {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\" component={ Login } />\r\n      <Route exact path=\"/jogo\" component={ Jogo } />\r\n      <Route exact path=\"/feedback\" component={ Feedback } />\r\n      <Route exact path=\"/ranking\" component={ Ranking } />\r\n      <Route exact path=\"/configuracao\" component={ Configuracao } />\r\n    </Switch>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport Store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <HashRouter basename=\"/\">\r\n      <Provider store={ Store }>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>\r\n  </BrowserRouter>,\r\n\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}